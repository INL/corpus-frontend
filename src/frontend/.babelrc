{
	"presets": [
		["@babel/preset-env", {
			/*
				Modules option can let babel transform import '...' statements into other ways of acquiring the module (commonjs, amd, etc)
				The default is transform to CommonJs (the NodeJs module format prior to native javascript modules using import/export)
				For now we need import statements to remain as they are, so the transform-es2015-modules-commonjs-simple plugin (see below) can do its work.

				Later we should be able to disable import/module transforming entirely (both modules = false here and removing the plugin)
				and allow webpack to process all imports.
			*/
			"modules": false,

			/*
				Scans our code and injects the necessary polyfills (promise, async, fetch, etc...)
				based on our browser targets and used language features.
				NOTE: the bundle still needs to import '@babel/polyfill' at the entry point to enable the polyfills, see utils/enable-polyfills.ts,
				which is prepended to all output files through our webpack config (webpack.config.(prod|dev).js)
			*/
			"useBuiltIns": "usage",
			"corejs": 3, //
			"targets": {
				"browsers": [
					">0.2%",
					"not dead",
					"not IE 11"
				]
			},
			"exclude": [
				"transform-regenerator",
				"@babel/plugin-transform-regenerator",
				"@babel/plugin-transform-async-to-generator",
			]
			// "debug": true
		}],
		"@vue/babel-preset-jsx"
	],
	"plugins": [
	]
}