import {getState, get, RootState} from '@/store';
import {getFilterString} from '@/utils';

import * as BLTypes from '@/types/blacklabtypes';

/** Converts page state into a query for blacklab-server. */
export function getBlsParamFromState(): BLTypes.BLSearchParameters {
	const state = getState();

	const viewProps = get.viewedResultsSettings();
	if (viewProps == null) {
		throw new Error('Cannot generate blacklab parameters without knowing hits or docs');
	}

	const submittedParameters = state.form.submittedParameters;
	if (submittedParameters == null) {
		// Realistically we can... because we can use the current state of the ui
		// but this should never happen before the form is submitted, or after it has been cleared
		throw new Error('Cannot generate blacklab parameters before search form has been submitted');
	}

	return {
		filter: getFilterString(submittedParameters.filters),
		first: state.settings.pageSize * viewProps.page,
		group: viewProps.groupBy.map(g => g + (viewProps.caseSensitive ? ':s':':i')).join(',') || undefined,
		// group: viewProps.groupBy.join(',') || undefined,
		number: state.settings.pageSize,
		patt: submittedParameters.pattern||undefined,

		sample: (state.settings.sampleMode === 'percentage' && state.settings.sampleSize) ? state.settings.sampleSize /* can't be null after check */ : undefined,
		samplenum: (state.settings.sampleMode === 'count' && state.settings.sampleSize) ? state.settings.sampleSize : undefined,
		sampleseed: (state.settings.sampleSeed != null && state.settings.sampleMode && state.settings.sampleSize) ? state.settings.sampleSeed : undefined,

		sort: viewProps.sort != null ? viewProps.sort : undefined,
		viewgroup: viewProps.viewGroup != null ? viewProps.viewGroup : undefined,
		wordsaroundhit: state.settings.wordsAroundHit != null ? state.settings.wordsAroundHit : undefined,
	};
}

/**
 * Get a human-readable summary of the most important search parameters
 * Arguments must be equal to the same members of the SearchParameters object
 *
 * @param pattern - A direct CQL query string, or an array of simple search paremeters. This value MUST be present if operation === 'hits'
 * @param within - raw token name (i.e. not enclosed in </>) for the within clause (so 'p' for paragraph, 's' for sentence, etc), only used when typeof pattern === 'Array'
 * @param filters - Metadata filters as generated by singlepage-form.js, every filter is expected to have a valid value.
 */
export function getQuerySummary(params: RootState['form']['submittedParameters']) {
	if (params == null) {
		return 'all documents';
	}

	const queryString = params.pattern;
	const metadataString = params.filters.map(({id, type, values}) =>
		`${id} = [${type==='range'?`${values[0]} to ${values[1]}`:values.join(', ')}]`).join(', ');

	let ret = '';
	if (queryString) {
		ret += '"' + queryString + '"' + ' within ';
	}
	if (metadataString) {
		ret += 'documents where ' + metadataString;
	} else {
		ret += 'all documents';
	}

	return ret;
}

export default {};
