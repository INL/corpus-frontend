#macro( filterfields $fields)
	<div class="form-horizontal">
#foreach($docfield in $fields)
		<div class="form-group filterfield" id="$docfield.getId()" data-filterfield-type="$docfield.getType()"> <!-- Behaves as a .row, so every child element should have some form of .col-* -->
		<label class="col-xs-12">$docfield.getDisplayName()</label>

		#if($docfield.getType() == "select" && !$docfield.getValidValues().isEmpty())
			<div class="col-xs-12">
				<select title="$docfield.getDisplayName()" class="selectpicker form-control forminput" data-container="body" multiple>
			
				#foreach($pair in $docfield.getValidValues())
					<option value="$pair.getValue()">$pair.getDescription()</option>
				#end
				</select>
			</div>
		#elseif($docfield.getType() == "combobox")
			<div class="col-xs-12">
				<select data-placeholder="$docfield.getDisplayName()" class="autocomplete" data-class="form-control forminput"> 
				#foreach($pair in $docfield.getValidValues())
					<option value="$pair.getValue()">$pair.getDescription()</option>
				#end
				</select>
			</div>
		#elseif($docfield.getType() == "range")
			<div class="col-xs-4">
				<input type="text" placeholder="From" class="form-control forminput" />
			</div>
			<div class="col-xs-4">
				<input type="text" placeholder="To" class="form-control forminput" />
			</div>
		#else
			<div class="col-xs-12">
				<input type="text" placeholder="$docfield.getDisplayName()" class="form-control forminput" />
			</div>
		#end

	</div>
#end
</div>
#end

#macro( propfield $field $propertyFieldInputId)
    #if($field.getType() == "select" && !$field.getValidValues().isEmpty())
        <select title="$field.getDisplayName()" class="selectpicker form-control forminput" data-container="body">

        #foreach($pair in $field.getValidValues())
                <option value="$pair.getValue()">$pair.getDescription()</option>
        #end
        </select>
    #else
        <input type="text" id="$propertyFieldInputId" name="$propertyFieldInputId" placeholder="$propertyField.getDisplayName()" class="form-control"/>
    #end
#end

#parse("header.vm")

<link rel="stylesheet" href="$pathToTop/css/cql_querybuilder.css">
<script src="$pathToTop/js/vendor/mustache.js"></script>
<script src="$pathToTop/js/vendor/URI.js"></script>
<script src="$pathToTop/js/qson.js"></script>
<script src="$pathToTop/js/singlepage.js"></script>
<script src="$pathToTop/js/singlepage-bls.js"></script>
<script src="$pathToTop/js/singlepage-form.js"></script>
<script src="$pathToTop/js/singlepage-interface.js"></script>
<script src="$pathToTop/js/cql_querybuilder.js"></script>
<script src="$pathToTop/js/singlepage-cqlparser.js"></script>
<script>
	var BLS_URL = "$blsUrl";
	var wordProperties = [
	#foreach($propertyField in $propertyFields)
		{
			id: "$propertyField.getId()",
			displayName: "$propertyField.getDisplayName()"
		},
	#end
	];
</script>

<!--
<noscript>
	<br/><br/><br/>
	<div class="alert alert-error">
		<h1>Error: JavaScript disabled.</h1>
		We notice that you have JavaScript disabled in your browser. This website requires JavaScript to be enabled. Please enable JavaScript to use this website.
	</div>
</noscript>
-->


<form onsubmit="return SINGLEPAGE.CORE.searchSubmit();" class="clearfix">

<div id="searchFormDivHeader" style="display:none;" class="btn btn-default btn-lg nohover">
	Results for: <span id="querySummary" class="small text-muted"></span> 
	<label class="checkbox-inline small" for="disableCollapseForm"><input name="disableCollapseForm" id="disableCollapseForm" type="checkbox"> Don't show again</label>
	<button type="button" class="btn btn-sm btn-danger" style="margin-left: 10px;"><span class="glyphicon glyphicon-pencil"></span> edit</button>
</div>

<div id='searchFormDiv' class="col-xs-12 contentbox collapse in">
	#if($websiteConfig.getCorpusOwner())<a href="$pathToTop" #if($websiteConfig.getLogo())style="margin-left: 100px;"#end><i class="fa fa-arrow-left"></i> back to my corpora</a>#end
	<h2>$websiteConfig.getCorpusDisplayName() #if($websiteConfig.getCorpusOwner())<span class="small">($websiteConfig.getCorpusOwner())</span>#end</h2>

	<div class="row">
		<div class="col-xs-12 col-md-6" id="searchContainer">
			<h3>Search for &hellip;</h3>
			<ul class="nav nav-tabs" id="searchTabs">
				<li class="active"><a href="#simple" data-toggle="tab" class="querytype">Simple</a></li>
				<li><a href="#advanced" data-toggle="tab" class="querytype">Advanced</a></li>
				<li><a href="#query" data-toggle="tab" class="querytype">CQL query</a></li>
			</ul>
			<div class="tab-content haspadding-15">
				<div class="tab-pane active" id="simple">
					<div class="form-horizontal">
					#foreach($propertyField in $propertyFields)
						#set ($propertyFieldInputId = $propertyField.getId() + "_value")
						#set ($propertyFieldFileInputId = $propertyField.getId() + "_file")
						#set ($propertyFieldCaseId = $propertyField.getId() + "_case")
	
						<div class="form-group propertyfield" id="$propertyField.getId()"> <!-- behaves as .row when in .form-horizontal so .row may be omitted -->
							<label for="$propertyFieldInputId" class="col-xs-12 col-md-3">$propertyField.getDisplayName()</label>
							<div class="col-xs-12 col-md-9 upload-button-container">
									
								#propfield($propertyField,$propertyFieldInputId)
									
								<button class="btn btn-default upload-button">
									<input type="file" id="$propertyFieldFileInputId" title="Upload a list of values">
									<span class="glyphicon glyphicon-open"> 
								</button>
									
								#if($propertyField.isCaseSensitive())
								<div class="checkbox"><label for="$propertyFieldCaseId"><input type="checkbox" id="$propertyFieldCaseId" name="$propertyFieldCaseId"> Case&nbsp;sensitive</label></div>
								#end
							</div>
						</div>
					#end
					
						<div class="form-group">
							## TODO extract available options from blacklab
							<label class="col-xs-12 col-md-3">Within:</label>
							
							<div class="btn-group col-xs-12 col-md-9" data-toggle="buttons" id="simplesearch_within" style="display:block;">
								<label class="btn btn-default active">
									<input type="radio" autocomplete="off" name="within" value="" checked="checked">document
								</label>
								<label class="btn btn-default">
									<input type="radio" autocomplete="off" name="within" value="p">paragraph
								</label>
								<label class="btn btn-default">
									<input type="radio" autocomplete="off" name="within" value="s">sentence
								</label>
							</div>
						</div>
						
					</div>
				</div>
				<div class="tab-pane" id="advanced">
					<div id="querybuilder"></div>
				</div>
				<div class="tab-pane" id="query">
					<h3>Corpus Query Language:</h3>
					<textarea id="querybox" class="form-control" name="querybox" rows="7"></textarea>
					<button type="button" class="btn btn-sm btn-default" name="parseQuery" id="parseQuery" title="Edit your query in the querybuilder">Copy to query builder</button>				
					<span id="parseQueryError" class="text-danger" style="display:none;"><span class="fa fa-danger"></span> The querybuilder could not parse your query</span>
				</div>
			</div>
		</div>

		#if($metadataGroups.isEmpty()) ## Only display ungrouped fields if no other groups are present
			#set($_ = $metadataGroups.put("Metadata", $ungroupedMetadataFields)) ## silence return value of put() to stop it from ending up in the page.
		#end
		#set($useFilterTabs = ($metadataGroups.size() > 1)) ##only use tabs when we have more than one group to display
		<div class="col-xs-12 col-md-6" id="filterContainer">
			<h3>Filter search by &hellip;</h3>
			
		#if($useFilterTabs) 
			<ul class="nav nav-tabs">
			#foreach($group in $metadataGroups.entrySet())
				#set($groupName = $group.key)
				#set($groupId = $groupName.replace(" ", ""))
				<li #if($velocityCount == 1) class="active" #end>
					<a href="#$groupId" data-toggle="tab">$groupName</a>
				</li>
				#set($firstGroup = "false")
			#end
			</ul>
			<div class="tab-content">
			#foreach($group in $metadataGroups.entrySet())
				#set($groupName = $group.key)
				#set($groupId = $groupName.replace(" ", ""))
				<div class="tab-pane #if($velocityCount == 1) active #end" id="$groupId">
					#filterfields($group.value)
				</div>
				#set($firstGroup = "false")			
			#end
			</div>
		#else ## $useFilterTabs
			#foreach($group in $metadataGroups.entrySet())
				<div class="tab-content">
				#filterfields($group.value)
				</div>
			#end
		#end
			<div class="row">
				<div class="col-xs-8"><span id="filteroverview"></span></div>
			</div>
		</div>

		<div class="col-xs-12">
			<hr>
			<div style="display:inline-block; position: absolute; bottom: 0;">
				<input type="submit" class="btn btn-primary btn-lg" value="Search">
				<a href="?" onclick="return SINGLEPAGE.CORE.resetPage();" class="btn btn-default btn-lg" title="Start a new search">Reset</a>
			</div>
			
			<button type="button" class="btn btn-lg btn-default pull-right" data-toggle="modal" data-target="#settingsModal"><span class="glyphicon glyphicon-cog" style="vertical-align:text-top;"></span></button>
		</div>
	</div>
</div>


<div id="settingsModal" class="modal fade" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Global settings</h4>
			</div>
			<div class="modal-body">
				<div class="form-horizontal">

					<div class="form-group"> <!-- behaves as .row when in .form-horizontal so .row may be omitted -->
						<label for="resultsPerPage" class="col-xs-3">Results per page:</label>
						<div class="col-xs-9">
							<select id="resultsPerPage" name="resultsPerPage" class="selectpicker" data-width="auto" data-style="btn-default">
								<option value="20">20 results</option>
								<option value="50">50 results</option>
								<option value="100">100 results</option>
								<option value="200">200 results</option>
							</select>
						</div>
					</div>

					<div class="form-group">
						<label for="sampleSize" class="col-xs-3">Sample size:</label>
						<div class="col-xs-9">
							<div class="input-group">
								<select  id="sampleMode" name="sampleMode" class="selectpicker" data-width="auto" data-style="btn-default">
									<option value="percentage" selected>percentage</option>
									<option value="count">count</option>
								</select>

								<input id="sampleSize" name="sampleSize" placeholder="sample size" type="number" class="form-control"/>
							</div>
						</div>
					</div>

					<div class="form-group">
						<label for="sampleSeed" class="col-xs-3">Seed:</label>
						<div class="col-xs-9">
							<input id="sampleSeed" name="sampleSeed" placeholder="seed" type="number" class="form-control" >
						</div>
					</div>
				</div>

			</div>
			<div class="modal-footer">
				<button type="button" name="closeSettings" class="btn btn-primary" data-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>


<div id="errorDiv" class="col-xs-12 alert alert-danger" style="display:none;">
	<h1>Error</h1>
	<p id="errorMessage"></p>
	<p>(for assistance, please contact <a href='mailto:servicedesk@ivdnt.org'>servicedesk@ivdnt.org</a>)</p>
</div>

<div class="col-xs-12 contentbox" id="results">
	<div id='totalsReport'>
		<div id="totalsReportText" class="pull-right"></div>
		<span id='totalsSpinner' class="fa fa-spinner fa-spin searchIndicator" style="font-size:20px; padding: 4px; margin: 0px 10px;"></span>
	</div>

	<!-- No initially active tab by design -->
	<ul id="resultTabs" class="nav nav-tabs">
		<li><a href="#tabHits" data-toggle="tab">Per Hit</a></li>
		<li><a href="#tabDocs" data-toggle="tab">Per Document</a></li>
	</ul>

	<div id="resultTabsContent" class="tab-content">
		<div id="tabHits" class="tab-pane">
			<div class="clearfix resultcontrols">
				<select class="selectpicker groupselect" title="Group hits by..." data-size="15" data-style="btn-default btn-sm" multiple>
					<optgroup label="Left context">
						#foreach($propertyField in $propertyFields)
						<option value="wordleft:$propertyField.getId()">Group by $propertyField.getDisplayName()</option>
						#end
					</optgroup>
					<optgroup label="Hit">
						#foreach($propertyField in $propertyFields)
						<option value="hit:$propertyField.getId()">Group by $propertyField.getDisplayName()</option>
						#end
					</optgroup>
					<optgroup label="Right context">
						#foreach($propertyField in $propertyFields)
						<option value="wordright:$propertyField.getId()">Group by $propertyField.getDisplayName()</option>
						#end
					</optgroup>
					#foreach($group in $metadataGroups.entrySet())
					<optgroup label="$group.key">
						#foreach($metadataField in $group.value)
						<option value="field:$metadataField.getId()">Group by $metadataField.getDisplayName()</option>
						#end
					</optgroup>
					#end
				</select>
				
				<div class="resultgroupdetails btn btn-sm btn-default nohover">
					<span class="fa fa-exclamation-triangle text-danger"></span> Viewing group <span class="resultgroupname"></span> &mdash; <a class="clearviewgroup" href="javascript:void(0)">Go back</a>
				</div>
				
				<!--<button type="button" class="btn btn-default btn-sm pull-right exportcsv" style="margin-left: 5px;">Export CSV</button>-->
				<button type="button" class="btn btn-danger btn-sm pull-right" data-toggle="collapse" data-target=".doctitle">Show/hide titles</button>
				<br>
				<ul class="pagination pagination-sm"></ul>
			</div>

			<span class="fa fa-spinner fa-spin searchIndicator" style="position:absolute; left: 50%; top:15px"></span>

			<div class="lightbg haspadding resultcontainer">
				<table>
				<tbody>
				</tbody>
				</table>
			</div>
		</div> <!-- tabHits -->

		<div id="tabDocs" class="tab-pane">
			<div class="clearfix resultcontrols">
				<select class="selectpicker groupselect" title="Group documents by..." data-size="15" data-style="btn-default btn-sm" multiple>
					#foreach($group in $metadataGroups.entrySet())
					<optgroup label="$group.key">
						#foreach($metadataField in $group.value)
						<option value="field:$metadataField.getId()">Group by $metadataField.getDisplayName()</option>
						#end
					</optgroup>
					#end
				</select>

				<div class="resultgroupdetails btn btn-sm btn-default nohover">
					<span class="fa fa-exclamation-triangle text-danger"></span> Viewing group <span class="resultgroupname"></span> &mdash; <a class="clearviewgroup" href="javascript:void(0)">Go back</a>
				</div>

				<!--<button type="button" class="btn btn-default btn-sm pull-right exportcsv">Export CSV</button>-->

				<br>
				<ul class="pagination pagination-sm"></ul>
			</div>

			<span class="fa fa-spinner fa-spin searchIndicator" style="position:absolute; left: 50%; top:15px"></span>

			<div class="lightbg haspadding resultcontainer">
				<table>
				<tbody>
				</tbody>
				</table>
			</div>
		</div> <!-- tabDocs -->
	</div>

	</div>

</form>

<ul id="tlyPageGuide" data-tourtitle="Searching the corpus">
	<li class="tlypageguide_top" data-tourtarget="a[href='#simple']">
		<div>
			<p>
				The <code>simple</code> search allows you to quickly find all occurrences of <code>tokens</code> with specific <code>attributes</code> in this corpus.<br>
			</p>
			<p>
				<code>Tokens</code> are the smallest unit within a corpus, usually just a single word.</br>
				<code>Attributes</code> are the different values that together make up a <code>token</code>.<br>
			 	The most commonly available attributes are <code>Lemma</code>, <code>Part of Speech</code> and <code>Word</code>,
				however this can differ on a corpus by corpus basis.<br>
				All supported attributes for this corpus will be shown here.<br>
			</p>
			<p>
				Enter the value you want to find tokens for in any of the inputs below.<br>
				Press enter or click the search button below to execute the search and view the results.<br> 
				As an example: to find all <code>nouns</code> within this corpus (assuming this corpus supports <code>part of speech</code> tags),
				enter <code>NOU</code> (or the equivalent tag for a noun in this corpus) in the <code>part of speech</code> field.<br>
				To find all occurrences of the word "ship", enter <code>ship</code> in the <code>lemma</code> field.<br>
			</p>
			<p>
				Values entered in these fields support <code>Wildcards</code>.<br>
				<code>Wildcards</code> are special characters that will match any other character. Two kinds of wildcards are supported:<br>
				The <code>*</code> wildcard will match any string, of any length.<br>
				The <code>?</code> wildcard will match any single letter or character.<br>
				As an example: searching for <code>a*b</code> will match <i>all values</i> that start with <code>a</code> and end with <code>b</code>, 
				while searching for <code>a?b</code> will match match <i>only three-letter values</i> starting with <code>a</code> and ending with <code>b</code>.<br>
			</p>
			<p>
				It's also possible to search for series of <code>tokens</code>, such as a <code>verb</code> followed by a <code>noun</code>.<br>
				To do this, enter multiple values in any of the fields, each value separated by a space.<br>
				As an example: to find all instances of an <code>adjective</code> followed by a <code>noun</code> (assuming this corpus contains <code>part of speech</code> tags),<br>
				enter <code>ADJ NOU</code> (or the equivalent names for this corpus) in the <code>part of speech</code> field.<br>
			</p>
			<p>
				Values at the same position in different fields are grouped together as a single <code>token</code>, meaning that all values in the first position of each field are grouped to match a single <code>token</code>, 
				likewise for the second values in every field, and so on.<br>
			 	As an example: searching for <code>part of speech</code> <code>NOU</code> together with <code>lemma</code> <code>a*</code> 
				will find all <code>nouns</code> starting with the letter <code>a</code> as you would expect, while searching for <code>pos</code> <code>ADJ NOU</code> together with <code>lemma</code> <code>a* b*</code> 
				will find all <code>adjectives</code> starting with the letter <code>a</code>, <i>followed by</i> a <code>noun</code> starting with the letter <code>b</code>.<br>
			</p>  
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget="a[href='#advanced']">
		<div>
			<p>
				This is the <code>querybuilder</code>. With it, you can create complex queries without writing CQL.<br>
			</p>
			<p>
				The querybuilder is structured around configuring the <code>attributes</code> of <code>tokens</code>.<br>
				Create one or more tokens, and fill in which attributes a token must have to be found.<br>
				In addition to the simple search, it's also possible to define specific combinations of attributes, or specify lists of possible attributes, and more.
			</p>
			<p>
				When multiple tokens are used, they are matched in order from left to right.<br>  
				Any time a query is created in the querybuilder, it's also copied to the <code>CQL editor</code>, where you can further edit the query by hand.
			</p>
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".bl-token .panel-heading">
		<div>
			<p>
				This is a <code>token</code>, the basic building block of a query.<br>
			</p>
			<p>
				A token in the querybuilder is made up two parts:<br>
				The set of <code>attributes</code> a token in the corpus must have to be matched by the query.<br> 
				Create attributes by clicking the + button within this token. Then enter a value that the attribute must have for the token to be found.<br>
				Contextual <code>properties</code>, such as whether the <code>token</code> occurs at the start, or the end of a sentence.
			</p>
			<p>
				The CQL query generated to match this token in the corpus is also displayed here, to help understand what is happening internally.<br>
			</p>
			<p>
				Rearrange a token by clicking and dragging the little arrow handle in the top-left corner.<br>
				Delete a token by clicking the x in the top-right corner.<br>
				Create new tokens by clicking the + button over on the right.<br>
			</p>
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".bl-token-create">
		<div>
			Create additional tokens by clicking this button.
		</div>
	</li>
	
	<li class="tlypageguide_right" data-tourtarget=".bl-token-attribute">
		<div>
			<p>
				This is an <code>attribute</code> of this token.<br>
			</p>
			<p>
				Attributes are much like in the <code>simple</code> search. Select which attribute
				a token should have, and enter the value that the attribute must have for the token to be matched.<br>
				In addition to this simple behavior the querybuilder also allows several more advanced configurations.<br>
				Attributes in the querybuilder are interpreted as <code>regular expressions</code>.
			</p>
			<p>
				Using the + buttons, new attributes can be added. Two options exist: <code>AND</code> and <code>OR</code>.<br>
				The <code>AND</code> option creates a new attribute that <i>also</i> must exist on a token for that token to be matched.<br>
				As an example: the attribute <code>part of speech</code> with value <code>NOU</code> is already defined, so all tokens that are nouns will be matched.<br> 
				Creating a new attribute using <code>AND</code> will change that query so that now a token must be a noun, <i>in addition</i> to being/having whatever new attribute is created.<br>
				The <code>OR</code> largely performs the same role, with the change that a token will now be matched whenever it has the original attribute <i>or</i> the new attribute.<br>
				As an example: you have an attribute <code>lemma = "bee"</code>, and you select <code>AND</code>.<br>
				Now you have <code>lemma = "bee"</code> AND <code>some other attribute</code>, and both of these must be true for a token to be found.<br>
				If you had selected code>OR</code> it would find all tokens with either <code>lemma = "bee"</code> or that have your new attribute<br>
			</p>
			<p>			
				It's also possible to upload a list of values, to do so, click the upload button that appears when you hover the mouse over the text input for this attribute and select a text file.
				Tokens will then be matched for any of the values from the file.<br>
				Uploaded files must be be plain text files (.txt), with each value on its own line.<br>
				After uploading a file, the text can be edited by clicking the yellow button that has appeared in place of the text field. Editing the text is temporary and will not modify your original file.<br> 
				To remove an uploaded file and go back to typing a value, click the upload button a second time, then press cancel instead of selecting a file.
			</p>
		</div>
	</li>
	

	<li class="tlypageguide_top" data-tourtarget="a[href='#query']">
		<div>
			<p>
				The <code>CQL editor</code> allows you to type your own CQL query, or edit a query further after creating it in the <code>querybuilder</code>. 
			</p>
			<p>
				Queries generated by the <code>querybuilder</code> will be pasted here automatically. Note that this will overwrite any queries you type here yourself!<br>
				In some cases, when the query is relatively simple, it can be also be imported into the querybuilder using the <code>copy to query builder</code> button below. 
				A message will be displayed next to the button if the query couldn't be parsed.  
			</p>
			<p>
				For more information on how to write <code>CQL</code>, <a style="text-decoration:underline;color:#337ab7;" target="_blank" href="https://github.com/INL/BlackLab/blob/d20eb71b25137facf10f7d2681242de34ab1fa54/core/src/site/markdown/corpus-query-language.md">click here</a>.
			</p>
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget="#filterContainer">
		<div>
			<p>
				Listed here are the <code>metadata</code> fields that exist on documents within this corpus.<br>
				Using these fields a query can be limited to a subset of documents with specific metadata values.<br>
				It's also possible to view all documents by leaving all <code>attributes</code> in the <code>simple</code> search empty.
			</p>
			<p>
				As an example: to search within only documents from the year <code>2003</code> (assuming documents contain metadata for the year of writing),<br>
				type <code>2003</code> in the <code>year</code> field (or the equivalent name of the year data in this corpus).<br>
			</p>
			<p>
				Some values like dates and numbers support entering a <code>range</code>.<br>
				Ranges are <code>inclusive</code>, meaning that for a range of <code>10 to 20</code>, documents for which the value is exactly 10 or 20 will also be included.
			</p>  
			<p>
				Some of the most common values will for each field be autocompleted as you are entering a value. Clicking on an autocompleted value will paste that value in the field.<br>   
				For fields where the total number of different values is relatively small, a dropdown will be shown instead, allowing you to pick the exact set of documents to search.<br>
			</p>
			<p>
				To search in documents within a set of different values, enter multiple values, separated by spaces. If one of the values already contains spaces of itself, it must be surrounded by double quotes (<code>"</code>).<br>
				As an example: to match the value <code>my metadata value</code>, enter <code>"my metadata value"</code> in the field, including the quotes.<br>
				Entering <code>three different values</code> without quotes will instead search in any document with a value of <code>three</code>, <code>different</code> or <code>values</code> for that metadata field.
			</p>
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget="#resultTabs">
		<div>
			Results can be viewed in two ways: as individual <code>hits</code> (groups of one or more <code>tokens</code> that matched the query), 
			or as the <code>documents</code> in which those hits exist.<br>
			Hits are only available when the query matches at least one attribute.
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".resultcontainer thead">
		<div>
			Click on any of the column headings to sort the <code>hits</code> on values within the column, clicking again inverts the sorting.
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".doctitle a">
		<div>
			<p>
				<code>Hit</code> rows are always preceded by a row containing the <code>document</code> in which those hits occurred.<br>
				Hit rows can be toggled on or off using the <code>Show/hide titles</code> button.<br>
			</p>
			<p>
				Click the title of this document to open the document in a new window. Hits from the current query will be highlighted in the opened document.<br>
				This functionality is only available when the corpus has not disabled the viewing of documents.<br> 
			</p>
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".resultcontainer .concordance">
		<div>
			Click a hit to show a part of the document surrounding the hit. Click again to close.
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".resultcontrols .bootstrap-select">
		<div>
			<p>
				Results can be grouped by properties of the <code>tokens</code> or <code>documents</code> in which those hits occur.<br>
				<code>left context</code>, <code>right context</code> and <code>hit</code> will group the tokens based on the <code>token's</code> attributes.<br>
				The remaining options group by the <code>metadata</code> of the <code>documents</code>.
			</p>
			<p>
				Grouping by multiple properties simultaneously is possible by selecting more than one option.
			</p>
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".group-size-indicator">
		<div>
			Click a <code>group</code> to show or hide the <code>hits</code> within that group.
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".viewconcordances">
		<div>
			Click here to go back to the normal <code>hits</code> view to see more detailed information for the hits in this group.<br>
			A small indicator will appear to let you know that you're looking at hits from a specific group only.
		</div>
	</li>
	
	<li class="tlypageguide_top" data-tourtarget=".documentrow">
		<div>
			Information about a <code>document</code>.<br>
			Click the document's title or the <code>view document info</code> button to open this document in a new window.<br> 
			This functionality is only available when the corpus has not disabled the viewing of documents.<br>
		</div>
	</li>
</ul>

#parse("footer.vm")

